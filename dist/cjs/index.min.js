"use strict";const e=(e,t,n,i)=>{if((n+1)%(24*i)==0)return"24:00";let s;const o={"Y+":e.getFullYear().toString(),"M+":(e.getMonth()+1).toString(),"d+":e.getDate().toString(),"h+":e.getHours().toString(),"m+":e.getMinutes().toString(),"S+":e.getSeconds().toString(),"q+":Math.floor((e.getMonth()+3)/3)};for(let e in o)s=new RegExp("("+e+")").exec(t),s&&(t=t.replace(s[1],1==s[1].length?o[e]:o[e].padStart(s[1].length,"0")));return t},t=(t,n,i)=>{const s=1542384e6+t*n*6e4,o=s+6e4*n;return`${e(new Date(s),"hh:mm",t,i)}~${e(new Date(o),"hh:mm",t,i)}`},n=(e,n,i)=>{return(s=e,Array.from(Array(s)).map(((e,t)=>t))).map(((e,s)=>({value:t(s,n,i),begin:t(s,n,i).split("~")[0],end:t(s,n,i).split("~")[1],col:s,check:!1})));var s};function i(e="",t=!0,n,i){let s=0;e.includes("次日")&&(e=e.replace("次日",""),s=24*i);let o=t?0:1,[a,l]=e.split(":").map((e=>Number(e)));const r=60*a+l;if(r%n)throw Error("The time period must be a multiple of the step size");return s+=r/n-o,s}const s=e=>Array.from(Array(e)).map(((e,t)=>t)),o=[{timePeriod:"00:00~24:00",label:"全天",key:"allDay",selected:!1},{timePeriod:"06:00~10:30",label:"早餐",key:"breakfast",selected:!1},{timePeriod:"10:30~13:30",label:"午高峰",key:"middayPeak",selected:!1},{timePeriod:"13:30~17:00",label:"下午茶",key:"afternoonTea",selected:!1},{timePeriod:"17:00~20:00",label:"晚高峰",key:"eveningRushHour",selected:!1},{timePeriod:"20:00~24:00",label:"夜宵1",key:"lateNightSnack1",selected:!1},{timePeriod:"00:00~6:00",label:"夜宵2",key:"lateNightSnack2",selected:!1}];var a={name:"DragTimePicker",model:{prop:"value",event:"change"},props:{needPeriod:{type:Boolean,default:()=>!1},value:{type:Array,required:!0},range:{validator:function(e){if(24!==e&&48!==e)throw Error('the value of "range" only be 24 or 48');return!0},default:()=>24},step:{type:Number,default:()=>30},periodList:{type:Array,default:()=>o},disabled:{type:Boolean,default:!1}},data:()=>({height:0,left:0,right:0,top:0,mode:0,row:0,col:0,flag:"flag-"+ +new Date,customPeriodList:[],timeData:[],isIncoming:!1}),computed:{styleValue(){return{height:`${this.height}px`,left:`${this.left}px`,right:`${this.right}px`,top:`${this.top}px`}},selectClasses:()=>e=>e.check?"ui-selected":"",theadArr(){return this.range>24?Array.from(Array(this.range/24)).reduce((e=>e.concat(s(24))),[]):s(24)},thLabel(){return Array.from(Array(this.range/24)).reduce((e=>e.concat(["00:00 ~ 12:00","12:00 ~ 24:00"])),[])},tdCount(){return this.range*this.colspan},colspan(){if(60%this.step!=0)throw new Error('"step" must be a divisor of 60');return 60/this.step},selectValue(){const e=function(e,t){let n,i,s,o=-1;const a=e.length,l=[];if(a){for(;++o<a;){const a=e[o];if(a.check)if(a.check!==Boolean(n)){i=a.col;let e=a.begin,n=a.end;i>=24*t&&(e=`次日${e}`,n=`次日${n}`),l.push("、",e,"~",n)}else if(l.length){s=a.col;let e=a.end;l.pop(),s>=24*t&&(e=`次日${e}`),l.push(e)}n=Boolean(a.check)}return l.shift(),l.join("")}}(this.timeData,this.colspan),t=this.format(e);return this.isIncoming?this.isIncoming=!1:this.$emit("change",t),e}},created(){var e,t,n;this.createTimeData(),this.customPeriodList=(e=this.periodList,t=this.colspan,n=this.step,e.forEach((e=>{const[s,o]=e.timePeriod.split("~"),a=i(s,!0,n,t),l=i(o,!1,n,t);e.range=[a,l]})),e),this.isIncoming=!0,this.valueToSelectValue()},destroyed(){this.clearTime()},watch:{range(){this.createTimeData(),this.cancelCustomPerioSelected()},value(){this.isIncoming=!0,this.valueToSelectValue()},colspan(){this.createTimeData()}},methods:{createTimeData(){this.timeData=n(this.range*this.colspan,this.step,this.colspan)},cancelCustomPerioSelected(){this.customPeriodList=this.customPeriodList.map((e=>(e.selected=!1,e)))},customTimePeriodChangeHandler(e,t){const{range:n,selected:i}=this.customPeriodList[t];this.customPeriodList[t].selected=!i,this.selectTime(n,!i),this.$emit("custom-time-period-change",this.customPeriodList[t])},cellDown(e){const t=document.querySelector(`.${this.flag} td[data-time='${e.col}']`),n=document.querySelector(`.${this.flag}`);this.check=Boolean(e.check),this.mode=1,t&&(this.left=t.offsetLeft,this.right=n.offsetWidth-(t.offsetLeft+t.offsetWidth),this.height=t.offsetHeight),this.col=e.col},cellEnter(e){const t=document.querySelector(`.${this.flag} td[data-time='${e.col}']`),n=document.querySelector(`.${this.flag}`);e.col-this.col>=24*this.colspan||(t&&!this.mode?(this.left=t.offsetLeft,this.right=n.offsetWidth-t.offsetLeft,this.top=t.offsetTop):e.col==this.col?(this.left=t.offsetLeft,this.right=n.offsetWidth-(t.offsetLeft+t.offsetWidth)):e.col<this.col?(this.left=t.offsetLeft,this.top=t.offsetTop):e.col>this.col&&(this.right=n.offsetWidth-(t.offsetLeft+t.offsetWidth)))},cellUp(e){if(e.col-this.col>=24*this.colspan)return this.height=0,this.mode=0,void this.$emit("on-error","时段选择不得超过24小时");e.col<=this.col?this.selectTime([e.col,this.col],!this.check):e.col>=this.col&&this.selectTime([this.col,e.col],!this.check),this.height=0,this.mode=0},format(e){if(!e)return[];return e.split("、").map((e=>{let t=e.split("~");return{startTime:t[0],endTime:t[1]}}))},valueToSelectValue(){this.value instanceof Array&&this.value.forEach((({startTime:e,endTime:t})=>{const n=i(e,!0,this.step,this.colspan),s=i(t,!1,this.step,this.colspan);if(s>=this.timeData.length)throw new Error('Out of range, please check prop: "value"');for(let e=n;e<=s;e++)this.$set(this.timeData[e],"check",!0)}))},selectTime(e,t){const[n,i]=e;this.timeData.forEach((e=>{e.col>=n&&e.col<=i&&this.$set(e,"check",t)}))},clearTime(){this.timeData.forEach((e=>{this.$set(e,"check",!1)})),this.cancelCustomPerioSelected(),this.$emit("on-clear")}}};function l(e,t,n,i,s,o,a,l,r,c){"boolean"!=typeof a&&(r=l,l=a,a=!1);const d="function"==typeof n?n.options:n;let h;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,s&&(d.functional=!0)),i&&(d._scopeId=i),o?(h=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),t&&t.call(this,r(e)),e&&e._registeredComponents&&e._registeredComponents.add(o)},d._ssrRegister=h):t&&(h=a?function(e){t.call(this,c(e,this.$root.$options.shadowRoot))}:function(e){t.call(this,l(e))}),h)if(d.functional){const e=d.render;d.render=function(t,n){return h.call(n),e(t,n)}}else{const e=d.beforeCreate;d.beforeCreate=e?[].concat(e,h):[h]}return n}const r="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function c(e){return(e,t)=>function(e,t){const n=r?t.media||"default":e,i=h[n]||(h[n]={ids:new Set,styles:[]});if(!i.ids.has(e)){i.ids.add(e);let n=t.source;if(t.map&&(n+="\n/*# sourceURL="+t.map.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t.map))))+" */"),i.element||(i.element=document.createElement("style"),i.element.type="text/css",t.media&&i.element.setAttribute("media",t.media),void 0===d&&(d=document.head||document.getElementsByTagName("head")[0]),d.appendChild(i.element)),"styleSheet"in i.element)i.styles.push(n),i.element.styleSheet.cssText=i.styles.filter(Boolean).join("\n");else{const e=i.ids.size-1,t=document.createTextNode(n),s=i.element.childNodes;s[e]&&i.element.removeChild(s[e]),s.length?i.element.insertBefore(t,s[e]):i.element.appendChild(t)}}}(e,t)}let d;const h={};const m=a;var p=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e.needPeriod?n("div",{staticClass:"button-wrapper"},e._l(e.customPeriodList,(function(t,i){return n("button",{key:t.key,staticClass:"el-button",attrs:{disabled:e.disabled,type:"button"},on:{click:function(t){return e.customTimePeriodChangeHandler(t,i)}}},[e._v("\n      "+e._s(t.timePeriod+"("+t.label+")")+"\n    ")])})),0):e._e(),e._v(" "),n("div",{class:["c-time",e.flag]},[n("div",{class:{"c-schedue":!0,"c-schedue-notransi":e.mode},style:e.styleValue}),e._v(" "),n("table",{staticClass:"c-time-table",class:{"c-min-table":e.colspan<2}},[n("thead",{staticClass:"c-time-head"},[n("tr",e._l(e.thLabel,(function(t,i){return n("th",{key:i,attrs:{colspan:12*e.colspan}},[e._v(e._s(t))])})),0),e._v(" "),n("tr",e._l(e.theadArr,(function(t,i){return n("td",{key:i,attrs:{colspan:e.colspan}},[e._v(e._s(t))])})),0)]),e._v(" "),n("tbody",{staticClass:"c-time-body"},[n("tr",e._l(e.timeData,(function(t,i){return n("td",{key:i,staticClass:"time-atom-item",class:e.selectClasses(t),attrs:{"data-time":""+t.col},on:{mouseenter:function(n){return e.cellEnter(t)},mousedown:function(n){return e.cellDown(t)},mouseup:function(n){return e.cellUp(t)}}})})),0),e._v(" "),n("tr",[n("td",{staticClass:"c-time-preview",attrs:{colspan:e.tdCount}},[n("div",{staticClass:"g-clearfix c-time-con"},[n("span",{staticClass:"g-pull-left"},[e._v("\n                "+e._s(e.selectValue?"已选择时间段":"可拖动鼠标在灰色区域内选择时间段")+"\n              ")]),e._v(" "),n("a",{staticClass:"g-pull-right",on:{click:e.clearTime}},[e._v("清空选择")])]),e._v(" "),e.selectValue?n("div",{staticClass:"c-time-time"},[n("div",[e._v(e._s(e.selectValue))])]):e._e()])]),e._v(" "),n("tr",[n("td",{staticClass:"c-time-note",attrs:{colspan:e.tdCount}},[n("div",[e._v("注：1.第一个时段的开始时间到最后时段的结束时间持续时长不超过24小时；2.最多只能配置3段时间段")])])])]),e._v(" "),e.disabled?n("tbody",{staticClass:"c-disabled"}):e._e()])])])};p._withStripped=!0;const A=l({render:p,staticRenderFns:[]},(function(e){e&&(e("data-v-01744a61_0",{source:'.c-time[data-v-01744a61] {\n  width: 100%;\n  min-width: 640px;\n  position: relative;\n  display: inline-block;\n  overflow-x: auto;\n}\n.c-schedue[data-v-01744a61] {\n  background: #99bbec;\n  position: absolute;\n  width: auto;\n  height: 0;\n  opacity: "0.6";\n  pointer-events: none;\n  z-index: 99;\n}\n.c-schedue-notransi[data-v-01744a61] {\n  transition: width 0.12s ease, height 0.12s ease, top 0.12s ease, left 0.12s ease;\n}\n.c-time-table[data-v-01744a61] {\n  border-collapse: collapse !important;\n  position: relative;\n  width: 100%;\n}\n.c-time-table th[data-v-01744a61] {\n  vertical-align: inherit;\n  font-weight: bold;\n}\n.c-time-table tr[data-v-01744a61] {\n  height: 30px;\n}\n.c-time-table tr[data-v-01744a61],\n.c-time-table td[data-v-01744a61],\n.c-time-table th[data-v-01744a61] {\n  user-select: none;\n  border: 1px solid #dee4f5;\n  text-align: center;\n  min-width: 12px;\n  line-height: 1.8em;\n  transition: background 0.2s ease;\n}\n.c-time-table .c-time-head[data-v-01744a61] {\n  font-size: 12px;\n}\n.c-time-table .c-time-head .time-td[data-v-01744a61] {\n  width: 70px;\n}\n.c-time-table .c-time-body[data-v-01744a61] {\n  font-size: 12px;\n}\n.c-time-table .c-time-body td.time-atom-item[data-v-01744a61] {\n  user-select: unset;\n  background-color: #f5f5f5 !important;\n}\n.c-time-table .c-time-body td.ui-selected[data-v-01744a61] {\n  background-color: #598fe6 !important;\n}\n.c-time-table .c-time-preview[data-v-01744a61] {\n  line-height: 2.4em;\n  padding: 0 10px;\n  font-size: 14px;\n}\n.c-time-table .c-time-preview .c-time-con[data-v-01744a61] {\n  line-height: 46px;\n  user-select: none;\n}\n.c-time-table .c-time-preview .c-time-time[data-v-01744a61] {\n  text-align: left;\n  line-height: 2.4em;\n}\n.c-time-table .c-time-preview .c-time-time p[data-v-01744a61] {\n  max-width: 625px;\n  line-height: 1.4em;\n  word-break: break-all;\n  margin-bottom: 8px;\n}\n.c-time-table .c-time-note div[data-v-01744a61] {\n  text-align: left;\n  padding: 0 10px;\n}\n.c-min-table tr[data-v-01744a61],\n.c-min-table td[data-v-01744a61],\n.c-min-table th[data-v-01744a61] {\n  min-width: 24px;\n}\n.g-clearfix[data-v-01744a61]:after, .g-clearfix[data-v-01744a61]:before {\n  clear: both;\n  content: " ";\n  display: table;\n}\n.g-pull-left[data-v-01744a61] {\n  float: left;\n}\n.g-pull-right[data-v-01744a61] {\n  float: right;\n  cursor: pointer;\n}\n.g-tip-text[data-v-01744a61] {\n  color: #999;\n}\n.c-disabled[data-v-01744a61] {\n  width: 100%;\n  background: #eee;\n  height: 77px;\n  position: absolute;\n  top: 60px;\n  left: 0;\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/*# sourceMappingURL=index.vue.map */',map:{version:3,sources:["/home/runner/work/drag-time-picker-vue2/drag-time-picker-vue2/src/index.vue","index.vue"],names:[],mappings:"AA+XA;EACA,WAAA;EACA,gBAAA;EACA,kBAAA;EACA,qBAAA;EACA,gBAAA;AC9XA;ADgYA;EACA,mBAAA;EACA,kBAAA;EACA,WAAA;EACA,SAAA;EACA,cAAA;EACA,oBAAA;EACA,WAAA;AC7XA;AD+XA;EACA,gFAAA;AC5XA;AD8XA;EACA,oCAAA;EACA,kBAAA;EACA,WAAA;AC3XA;AD6XA;EACA,uBAAA;EACA,iBAAA;AC3XA;AD6XA;EACA,YAAA;AC3XA;AD6XA;;;EAGA,iBAAA;EACA,yBAAA;EACA,kBAAA;EACA,eAAA;EACA,kBAAA;EACA,gCAAA;AC3XA;AD6XA;EACA,eAAA;AC3XA;AD4XA;EACA,WAAA;AC1XA;AD6XA;EACA,eAAA;AC3XA;AD6XA;EACA,kBAAA;EACA,oCAAA;AC3XA;AD6XA;EACA,oCAAA;AC3XA;AD+XA;EACA,kBAAA;EACA,eAAA;EACA,eAAA;AC7XA;AD8XA;EACA,iBAAA;EACA,iBAAA;AC5XA;AD8XA;EACA,gBAAA;EACA,kBAAA;AC5XA;AD6XA;EACA,gBAAA;EACA,kBAAA;EACA,qBAAA;EACA,kBAAA;AC3XA;ADgYA;EACA,gBAAA;EACA,eAAA;AC9XA;ADmYA;;;EAGA,eAAA;AChYA;ADoYA;EAEA,WAAA;EACA,YAAA;EACA,cAAA;AClYA;ADqYA;EACA,WAAA;AClYA;ADoYA;EACA,YAAA;EACA,eAAA;ACjYA;ADmYA;EACA,WAAA;AChYA;ADkYA;EACA,WAAA;EACA,gBAAA;EACA,YAAA;EACA,kBAAA;EACA,SAAA;EACA,OAAA;EACA,YAAA;EACA,mBAAA;AC/XA;;AAEA,oCAAoC",file:"index.vue",sourcesContent:['<template>\n  <div>\n    \x3c!-- 时间段区域 支持 单选和多选 --\x3e\n    <div v-if="needPeriod" class="button-wrapper">\n      <button\n        :key="item.key"\n        v-for="(item, index) in customPeriodList"\n        class="el-button"\n        :disabled="disabled"\n        @click="customTimePeriodChangeHandler($event, index)"\n        type="button"\n      >\n        {{ item.timePeriod + "(" + item.label + ")" }}\n      </button>\n    </div>\n\n    <div :class="[\'c-time\', flag]">\n      \x3c!-- 鼠标拖动时的蒙层 --\x3e\n      <div :class="{ \'c-schedue\': true, \'c-schedue-notransi\': mode }" :style="styleValue"></div>\n      <table :class="{ \'c-min-table\': colspan < 2 }" class="c-time-table">\n        \x3c!-- 表格头 --\x3e\n        <thead class="c-time-head">\n          \x3c!-- 表头——时间段 00:00 - 12:00 --\x3e\n          <tr>\n            <th :key="i" v-for="(t, i) in thLabel" :colspan="12 * colspan">{{ t }}</th>\n          </tr>\n          \x3c!-- 表头——小时 --\x3e\n          <tr>\n            <td :key="n" v-for="(t, n) in theadArr" :colspan="colspan">{{ t }}</td>\n          </tr>\n        </thead>\n        \x3c!-- 表格体 --\x3e\n        <tbody class="c-time-body">\n          <tr>\n            <td\n              :key="i"\n              v-for="(t, i) in timeData"\n              :data-time="`${t.col}`"\n              :class="selectClasses(t)"\n              @mouseenter="cellEnter(t)"\n              @mousedown="cellDown(t)"\n              @mouseup="cellUp(t)"\n              class="time-atom-item"\n            ></td>\n          </tr>\n          <tr>\n            <td :colspan="tdCount" class="c-time-preview">\n              <div class="g-clearfix c-time-con">\n                <span class="g-pull-left">\n                  {{ selectValue ? "已选择时间段" : "可拖动鼠标在灰色区域内选择时间段" }}\n                </span>\n                <a @click="clearTime" class="g-pull-right">清空选择</a>\n              </div>\n              <div v-if="selectValue" class="c-time-time">\n                <div>{{ selectValue }}</div>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td :colspan="tdCount" class="c-time-note">\n              <div>注：1.第一个时段的开始时间到最后时段的结束时间持续时长不超过24小时；2.最多只能配置3段时间段</div>\n            </td>\n          </tr>\n        </tbody>\n        <tbody class="c-disabled" v-if="disabled"></tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createTimeData, splicing, timeToCol } from "./utils.js";\n\nconst createArr = (len) => {\n  return Array.from(Array(len)).map((_, i) => i);\n};\nconst defaultCustomPeriodList = [\n  {\n    timePeriod: "00:00~24:00",\n    label: "全天",\n    key: "allDay",\n    selected: false\n  },\n  {\n    timePeriod: "06:00~10:30",\n    label: "早餐",\n    key: "breakfast",\n    selected: false\n  },\n  {\n    timePeriod: "10:30~13:30",\n    label: "午高峰",\n    key: "middayPeak",\n    selected: false\n  },\n  {\n    timePeriod: "13:30~17:00",\n    label: "下午茶",\n    key: "afternoonTea",\n    selected: false\n  },\n  {\n    timePeriod: "17:00~20:00",\n    label: "晚高峰",\n    key: "eveningRushHour",\n    selected: false\n  },\n  {\n    timePeriod: "20:00~24:00",\n    label: "夜宵1",\n    key: "lateNightSnack1",\n    selected: false\n  },\n  {\n    timePeriod: "00:00~6:00",\n    label: "夜宵2",\n    key: "lateNightSnack2",\n    selected: false\n  }\n];\nconst createPeriodList = (customPeriodList, colspan, step) => {\n  customPeriodList.forEach((item) => {\n    const [startTime, endTime] = item.timePeriod.split("~");\n    const minCol = timeToCol(startTime, true, step, colspan);\n    const maxCol = timeToCol(endTime, false, step, colspan);\n    item.range = [minCol, maxCol];\n  });\n  return customPeriodList;\n};\nexport default {\n  name: "DragTimePicker",\n  model: {\n    prop: "value",\n    event: "change"\n  },\n  props: {\n    needPeriod: {\n      type: Boolean,\n      default() {\n        return false;\n      }\n    },\n    value: {\n      // v-model\n      type: Array,\n      required: true\n    },\n    range: {\n      // 代表展示多少个小时\n      validator: function (value) {\n        if (value !== 24 && value !== 48) {\n          throw Error(`the value of "range" only be 24 or 48`);\n        }\n        return true;\n      },\n      default() {\n        return 24;\n      }\n    },\n    step: {\n      type: Number,\n      default() {\n        return 30;\n      }\n    },\n    periodList: {\n      type: Array,\n      default() {\n        return defaultCustomPeriodList;\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      height: 0,\n      left: 0,\n      right: 0,\n      top: 0,\n      mode: 0,\n      row: 0,\n      col: 0,\n      flag: `flag-${+new Date()}`,\n      customPeriodList: [],\n      timeData: [],\n      isIncoming: false // 当前值是否外部传入\n    };\n  },\n  computed: {\n    styleValue() {\n      return {\n        height: `${this.height}px`,\n        left: `${this.left}px`, // width:auto 利用left合和right拉伸蒙层\n        right: `${this.right}px`,\n        top: `${this.top}px`\n      };\n    },\n    selectClasses() {\n      return (n) => (n.check ? "ui-selected" : "");\n    },\n    theadArr() {\n      // 构建 0-23 的数组，超过24的数组例如48为 0-230-23\n      return this.range > 24 ? Array.from(Array(this.range / 24)).reduce((prev) => prev.concat(createArr(24)), []) : createArr(24);\n    },\n    thLabel() {\n      return Array.from(Array(this.range / 24)).reduce((prev) => prev.concat(["00:00 ~ 12:00", "12:00 ~ 24:00"]), []);\n    },\n    tdCount() {\n      return this.range * this.colspan;\n    },\n    colspan() {\n      // 一个小时多少格\n      if (60 % this.step !== 0) {\n        throw new Error(`"step" must be a divisor of 60`);\n      }\n      return 60 / this.step;\n    },\n    selectValue() {\n      // 展示选中时间段字符串\n      // timeData 改变 重新计算 selectValue 并将选中值抛出\n      const selectValue = splicing(this.timeData, this.colspan);\n      const result = this.format(selectValue);\n      if (this.isIncoming) {\n        this.isIncoming = false;\n      } else {\n        this.$emit("change", result); // 抛出选中值给父组件读取\n      }\n      return selectValue;\n    }\n  },\n  created() {\n    this.createTimeData();\n    this.customPeriodList = createPeriodList(this.periodList, this.colspan, this.step);\n    this.isIncoming = true;\n    this.valueToSelectValue();\n  },\n  destroyed() {\n    this.clearTime();\n  },\n  watch: {\n    range() {\n      // range变化重新计算格子\n      this.createTimeData();\n      this.cancelCustomPerioSelected();\n    },\n    value() {\n      this.isIncoming = true;\n      // 回填 将传入的值转换为timeData check属性\n      this.valueToSelectValue();\n    },\n    colspan() {\n      // colspan变化重新计算格子\n      this.createTimeData();\n    }\n  },\n  methods: {\n    createTimeData() {\n      this.timeData = createTimeData(this.range * this.colspan, this.step, this.colspan);\n    },\n    cancelCustomPerioSelected() {\n      // 取消 时间段区域 按钮 的选中状态\n      this.customPeriodList = this.customPeriodList.map((item) => {\n        item.selected = false;\n        return item;\n      });\n    },\n    customTimePeriodChangeHandler(_, index) {\n      // 时间段区域 按钮 点击回调\n      const { range, selected } = this.customPeriodList[index];\n      // 按钮选中状态取反\n      this.customPeriodList[index].selected = !selected;\n      // 选中时间格\n      this.selectTime(range, !selected);\n      // 触发事件，向自组件抛出数据\n      this.$emit("custom-time-period-change", this.customPeriodList[index]);\n    },\n    cellDown(item) {\n      // 鼠标落下\n      const ele = document.querySelector(`.${this.flag} td[data-time=\'${item.col}\']`);\n      const parent = document.querySelector(`.${this.flag}`);\n      this.check = Boolean(item.check);\n      this.mode = 1;\n      if (ele) {\n        this.left = ele.offsetLeft;\n        this.right = parent.offsetWidth - (ele.offsetLeft + ele.offsetWidth);\n        this.height = ele.offsetHeight;\n      }\n\n      this.col = item.col;\n    },\n    cellEnter(item) {\n      // 鼠标进入\n      const ele = document.querySelector(`.${this.flag} td[data-time=\'${item.col}\']`);\n      const parent = document.querySelector(`.${this.flag}`);\n      if (item.col - this.col >= 24 * this.colspan) {\n        return;\n      }\n      if (ele && !this.mode) {\n        this.left = ele.offsetLeft;\n        this.right = parent.offsetWidth - ele.offsetLeft;\n        this.top = ele.offsetTop;\n      } else if (item.col == this.col) {\n        this.left = ele.offsetLeft;\n        this.right = parent.offsetWidth - (ele.offsetLeft + ele.offsetWidth);\n      } else if (item.col < this.col) {\n        this.left = ele.offsetLeft;\n        this.top = ele.offsetTop;\n      } else if (item.col > this.col) {\n        this.right = parent.offsetWidth - (ele.offsetLeft + ele.offsetWidth);\n      }\n    },\n    cellUp(item) {\n      // 鼠标抬起 这三个是控制拖动时的动画效果\n      if (item.col - this.col >= 24 * this.colspan) {\n        this.height = 0;\n        this.mode = 0;\n        this.$emit("on-error", "时段选择不得超过24小时");\n        return;\n      }\n      if (item.col <= this.col) {\n        this.selectTime([item.col, this.col], !this.check);\n      } else if (item.col >= this.col) {\n        this.selectTime([this.col, item.col], !this.check);\n      }\n\n      this.height = 0;\n      this.mode = 0;\n    },\n    format(txt) {\n      // 将选中数据转换格式\n      if (!txt) {\n        return [];\n      }\n      let timeRange = txt.split("、");\n      let result = timeRange.map((item) => {\n        let arr = item.split("~");\n        return {\n          startTime: arr[0],\n          endTime: arr[1]\n        };\n      });\n      return result;\n    },\n    valueToSelectValue() {\n      // 回填 将传入的值转换为timeData check属性\n      if (this.value instanceof Array) {\n        this.value.forEach(({ startTime, endTime }) => {\n          const minCol = timeToCol(startTime, true, this.step, this.colspan);\n          const maxCol = timeToCol(endTime, false, this.step, this.colspan);\n          if (maxCol >= this.timeData.length) throw new Error(`Out of range, please check prop: "value"`);\n          for (let i = minCol; i <= maxCol; i++) {\n            this.$set(this.timeData[i], "check", true);\n          }\n        });\n      }\n    },\n    selectTime(col, check) {\n      // 选中时间格\n      const [minCol, maxCol] = col;\n      // 一切变化 源于对 timeData check属性的修改\n      // timeData需要被主动修改 所以并不能是 计算属性\n      this.timeData.forEach((t) => {\n        if (t.col >= minCol && t.col <= maxCol) {\n          this.$set(t, "check", check);\n        }\n      });\n    },\n    clearTime() {\n      this.timeData.forEach((t) => {\n        this.$set(t, "check", false);\n      });\n      this.cancelCustomPerioSelected();\n      // 触发事件\n      this.$emit("on-clear");\n    }\n  }\n};\n<\/script>\n\n<style lang="scss" scoped>\n.c-time {\n  width: 100%;\n  min-width: 640px;\n  position: relative;\n  display: inline-block;\n  overflow-x: auto;\n}\n.c-schedue {\n  background: #99bbec;\n  position: absolute;\n  width: auto;\n  height: 0;\n  opacity: "0.6";\n  pointer-events: none;\n  z-index: 99;\n}\n.c-schedue-notransi {\n  transition: width 0.12s ease, height 0.12s ease, top 0.12s ease, left 0.12s ease;\n}\n.c-time-table {\n  border-collapse: collapse !important;\n  position: relative;\n  width: 100%;\n\n  th {\n    vertical-align: inherit;\n    font-weight: bold;\n  }\n  tr {\n    height: 30px;\n  }\n  tr,\n  td,\n  th {\n    user-select: none;\n    border: 1px solid #dee4f5;\n    text-align: center;\n    min-width: 12px;\n    line-height: 1.8em;\n    transition: background 0.2s ease;\n  }\n  .c-time-head {\n    font-size: 12px;\n    .time-td {\n      width: 70px;\n    }\n  }\n  .c-time-body {\n    font-size: 12px;\n    td {\n      &.time-atom-item {\n        user-select: unset;\n        background-color: #f5f5f5 !important;\n      }\n      &.ui-selected {\n        background-color: #598fe6 !important;\n      }\n    }\n  }\n  .c-time-preview {\n    line-height: 2.4em;\n    padding: 0 10px;\n    font-size: 14px;\n    .c-time-con {\n      line-height: 46px;\n      user-select: none;\n    }\n    .c-time-time {\n      text-align: left;\n      line-height: 2.4em;\n      p {\n        max-width: 625px;\n        line-height: 1.4em;\n        word-break: break-all;\n        margin-bottom: 8px;\n      }\n    }\n  }\n  .c-time-note {\n    div {\n      text-align: left;\n      padding: 0 10px;\n    }\n  }\n}\n.c-min-table {\n  tr,\n  td,\n  th {\n    min-width: 24px;\n  }\n}\n.g-clearfix {\n  &:after,\n  &:before {\n    clear: both;\n    content: " ";\n    display: table;\n  }\n}\n.g-pull-left {\n  float: left;\n}\n.g-pull-right {\n  float: right;\n  cursor: pointer;\n}\n.g-tip-text {\n  color: #999;\n}\n.c-disabled {\n  width: 100%;\n  background: #eee;\n  height: 77px;\n  position: absolute;\n  top: 60px;\n  left: 0;\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n</style>\n<style lang="scss" scoped>\n.button-wrapper {\n  margin-bottom: 10px;\n  /* display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap; */\n}\n.el-button {\n  display: inline-block;\n  line-height: 1;\n  white-space: nowrap;\n  cursor: pointer;\n  background: #fff;\n  border: 1px solid #dcdfe6;\n  color: #606266;\n  text-align: center;\n  box-sizing: border-box;\n  outline: none;\n  margin: 5px;\n  transition: 0.1s;\n  font-weight: 500;\n  padding: 10px;\n  font-size: 14px;\n  border-radius: 4px;\n}\n.el-button:hover {\n  color: #409eff;\n  border-color: #409eff;\n}\n</style>\n','.c-time {\n  width: 100%;\n  min-width: 640px;\n  position: relative;\n  display: inline-block;\n  overflow-x: auto;\n}\n\n.c-schedue {\n  background: #99bbec;\n  position: absolute;\n  width: auto;\n  height: 0;\n  opacity: "0.6";\n  pointer-events: none;\n  z-index: 99;\n}\n\n.c-schedue-notransi {\n  transition: width 0.12s ease, height 0.12s ease, top 0.12s ease, left 0.12s ease;\n}\n\n.c-time-table {\n  border-collapse: collapse !important;\n  position: relative;\n  width: 100%;\n}\n.c-time-table th {\n  vertical-align: inherit;\n  font-weight: bold;\n}\n.c-time-table tr {\n  height: 30px;\n}\n.c-time-table tr,\n.c-time-table td,\n.c-time-table th {\n  user-select: none;\n  border: 1px solid #dee4f5;\n  text-align: center;\n  min-width: 12px;\n  line-height: 1.8em;\n  transition: background 0.2s ease;\n}\n.c-time-table .c-time-head {\n  font-size: 12px;\n}\n.c-time-table .c-time-head .time-td {\n  width: 70px;\n}\n.c-time-table .c-time-body {\n  font-size: 12px;\n}\n.c-time-table .c-time-body td.time-atom-item {\n  user-select: unset;\n  background-color: #f5f5f5 !important;\n}\n.c-time-table .c-time-body td.ui-selected {\n  background-color: #598fe6 !important;\n}\n.c-time-table .c-time-preview {\n  line-height: 2.4em;\n  padding: 0 10px;\n  font-size: 14px;\n}\n.c-time-table .c-time-preview .c-time-con {\n  line-height: 46px;\n  user-select: none;\n}\n.c-time-table .c-time-preview .c-time-time {\n  text-align: left;\n  line-height: 2.4em;\n}\n.c-time-table .c-time-preview .c-time-time p {\n  max-width: 625px;\n  line-height: 1.4em;\n  word-break: break-all;\n  margin-bottom: 8px;\n}\n.c-time-table .c-time-note div {\n  text-align: left;\n  padding: 0 10px;\n}\n\n.c-min-table tr,\n.c-min-table td,\n.c-min-table th {\n  min-width: 24px;\n}\n\n.g-clearfix:after, .g-clearfix:before {\n  clear: both;\n  content: " ";\n  display: table;\n}\n\n.g-pull-left {\n  float: left;\n}\n\n.g-pull-right {\n  float: right;\n  cursor: pointer;\n}\n\n.g-tip-text {\n  color: #999;\n}\n\n.c-disabled {\n  width: 100%;\n  background: #eee;\n  height: 77px;\n  position: absolute;\n  top: 60px;\n  left: 0;\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/*# sourceMappingURL=index.vue.map */']},media:void 0}),e("data-v-01744a61_1",{source:".button-wrapper[data-v-01744a61] {\n  margin-bottom: 10px;\n  /* display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap; */\n}\n.el-button[data-v-01744a61] {\n  display: inline-block;\n  line-height: 1;\n  white-space: nowrap;\n  cursor: pointer;\n  background: #fff;\n  border: 1px solid #dcdfe6;\n  color: #606266;\n  text-align: center;\n  box-sizing: border-box;\n  outline: none;\n  margin: 5px;\n  transition: 0.1s;\n  font-weight: 500;\n  padding: 10px;\n  font-size: 14px;\n  border-radius: 4px;\n}\n.el-button[data-v-01744a61]:hover {\n  color: #409eff;\n  border-color: #409eff;\n}\n\n/*# sourceMappingURL=index.vue.map */",map:{version:3,sources:["/home/runner/work/drag-time-picker-vue2/drag-time-picker-vue2/src/index.vue","index.vue"],names:[],mappings:"AAyfA;EACA,mBAAA;EACA;;oBAAA;ACtfA;AD0fA;EACA,qBAAA;EACA,cAAA;EACA,mBAAA;EACA,eAAA;EACA,gBAAA;EACA,yBAAA;EACA,cAAA;EACA,kBAAA;EACA,sBAAA;EACA,aAAA;EACA,WAAA;EACA,gBAAA;EACA,gBAAA;EACA,aAAA;EACA,eAAA;EACA,kBAAA;ACvfA;ADyfA;EACA,cAAA;EACA,qBAAA;ACtfA;;AAEA,oCAAoC",file:"index.vue",sourcesContent:['<template>\n  <div>\n    \x3c!-- 时间段区域 支持 单选和多选 --\x3e\n    <div v-if="needPeriod" class="button-wrapper">\n      <button\n        :key="item.key"\n        v-for="(item, index) in customPeriodList"\n        class="el-button"\n        :disabled="disabled"\n        @click="customTimePeriodChangeHandler($event, index)"\n        type="button"\n      >\n        {{ item.timePeriod + "(" + item.label + ")" }}\n      </button>\n    </div>\n\n    <div :class="[\'c-time\', flag]">\n      \x3c!-- 鼠标拖动时的蒙层 --\x3e\n      <div :class="{ \'c-schedue\': true, \'c-schedue-notransi\': mode }" :style="styleValue"></div>\n      <table :class="{ \'c-min-table\': colspan < 2 }" class="c-time-table">\n        \x3c!-- 表格头 --\x3e\n        <thead class="c-time-head">\n          \x3c!-- 表头——时间段 00:00 - 12:00 --\x3e\n          <tr>\n            <th :key="i" v-for="(t, i) in thLabel" :colspan="12 * colspan">{{ t }}</th>\n          </tr>\n          \x3c!-- 表头——小时 --\x3e\n          <tr>\n            <td :key="n" v-for="(t, n) in theadArr" :colspan="colspan">{{ t }}</td>\n          </tr>\n        </thead>\n        \x3c!-- 表格体 --\x3e\n        <tbody class="c-time-body">\n          <tr>\n            <td\n              :key="i"\n              v-for="(t, i) in timeData"\n              :data-time="`${t.col}`"\n              :class="selectClasses(t)"\n              @mouseenter="cellEnter(t)"\n              @mousedown="cellDown(t)"\n              @mouseup="cellUp(t)"\n              class="time-atom-item"\n            ></td>\n          </tr>\n          <tr>\n            <td :colspan="tdCount" class="c-time-preview">\n              <div class="g-clearfix c-time-con">\n                <span class="g-pull-left">\n                  {{ selectValue ? "已选择时间段" : "可拖动鼠标在灰色区域内选择时间段" }}\n                </span>\n                <a @click="clearTime" class="g-pull-right">清空选择</a>\n              </div>\n              <div v-if="selectValue" class="c-time-time">\n                <div>{{ selectValue }}</div>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td :colspan="tdCount" class="c-time-note">\n              <div>注：1.第一个时段的开始时间到最后时段的结束时间持续时长不超过24小时；2.最多只能配置3段时间段</div>\n            </td>\n          </tr>\n        </tbody>\n        <tbody class="c-disabled" v-if="disabled"></tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createTimeData, splicing, timeToCol } from "./utils.js";\n\nconst createArr = (len) => {\n  return Array.from(Array(len)).map((_, i) => i);\n};\nconst defaultCustomPeriodList = [\n  {\n    timePeriod: "00:00~24:00",\n    label: "全天",\n    key: "allDay",\n    selected: false\n  },\n  {\n    timePeriod: "06:00~10:30",\n    label: "早餐",\n    key: "breakfast",\n    selected: false\n  },\n  {\n    timePeriod: "10:30~13:30",\n    label: "午高峰",\n    key: "middayPeak",\n    selected: false\n  },\n  {\n    timePeriod: "13:30~17:00",\n    label: "下午茶",\n    key: "afternoonTea",\n    selected: false\n  },\n  {\n    timePeriod: "17:00~20:00",\n    label: "晚高峰",\n    key: "eveningRushHour",\n    selected: false\n  },\n  {\n    timePeriod: "20:00~24:00",\n    label: "夜宵1",\n    key: "lateNightSnack1",\n    selected: false\n  },\n  {\n    timePeriod: "00:00~6:00",\n    label: "夜宵2",\n    key: "lateNightSnack2",\n    selected: false\n  }\n];\nconst createPeriodList = (customPeriodList, colspan, step) => {\n  customPeriodList.forEach((item) => {\n    const [startTime, endTime] = item.timePeriod.split("~");\n    const minCol = timeToCol(startTime, true, step, colspan);\n    const maxCol = timeToCol(endTime, false, step, colspan);\n    item.range = [minCol, maxCol];\n  });\n  return customPeriodList;\n};\nexport default {\n  name: "DragTimePicker",\n  model: {\n    prop: "value",\n    event: "change"\n  },\n  props: {\n    needPeriod: {\n      type: Boolean,\n      default() {\n        return false;\n      }\n    },\n    value: {\n      // v-model\n      type: Array,\n      required: true\n    },\n    range: {\n      // 代表展示多少个小时\n      validator: function (value) {\n        if (value !== 24 && value !== 48) {\n          throw Error(`the value of "range" only be 24 or 48`);\n        }\n        return true;\n      },\n      default() {\n        return 24;\n      }\n    },\n    step: {\n      type: Number,\n      default() {\n        return 30;\n      }\n    },\n    periodList: {\n      type: Array,\n      default() {\n        return defaultCustomPeriodList;\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      height: 0,\n      left: 0,\n      right: 0,\n      top: 0,\n      mode: 0,\n      row: 0,\n      col: 0,\n      flag: `flag-${+new Date()}`,\n      customPeriodList: [],\n      timeData: [],\n      isIncoming: false // 当前值是否外部传入\n    };\n  },\n  computed: {\n    styleValue() {\n      return {\n        height: `${this.height}px`,\n        left: `${this.left}px`, // width:auto 利用left合和right拉伸蒙层\n        right: `${this.right}px`,\n        top: `${this.top}px`\n      };\n    },\n    selectClasses() {\n      return (n) => (n.check ? "ui-selected" : "");\n    },\n    theadArr() {\n      // 构建 0-23 的数组，超过24的数组例如48为 0-230-23\n      return this.range > 24 ? Array.from(Array(this.range / 24)).reduce((prev) => prev.concat(createArr(24)), []) : createArr(24);\n    },\n    thLabel() {\n      return Array.from(Array(this.range / 24)).reduce((prev) => prev.concat(["00:00 ~ 12:00", "12:00 ~ 24:00"]), []);\n    },\n    tdCount() {\n      return this.range * this.colspan;\n    },\n    colspan() {\n      // 一个小时多少格\n      if (60 % this.step !== 0) {\n        throw new Error(`"step" must be a divisor of 60`);\n      }\n      return 60 / this.step;\n    },\n    selectValue() {\n      // 展示选中时间段字符串\n      // timeData 改变 重新计算 selectValue 并将选中值抛出\n      const selectValue = splicing(this.timeData, this.colspan);\n      const result = this.format(selectValue);\n      if (this.isIncoming) {\n        this.isIncoming = false;\n      } else {\n        this.$emit("change", result); // 抛出选中值给父组件读取\n      }\n      return selectValue;\n    }\n  },\n  created() {\n    this.createTimeData();\n    this.customPeriodList = createPeriodList(this.periodList, this.colspan, this.step);\n    this.isIncoming = true;\n    this.valueToSelectValue();\n  },\n  destroyed() {\n    this.clearTime();\n  },\n  watch: {\n    range() {\n      // range变化重新计算格子\n      this.createTimeData();\n      this.cancelCustomPerioSelected();\n    },\n    value() {\n      this.isIncoming = true;\n      // 回填 将传入的值转换为timeData check属性\n      this.valueToSelectValue();\n    },\n    colspan() {\n      // colspan变化重新计算格子\n      this.createTimeData();\n    }\n  },\n  methods: {\n    createTimeData() {\n      this.timeData = createTimeData(this.range * this.colspan, this.step, this.colspan);\n    },\n    cancelCustomPerioSelected() {\n      // 取消 时间段区域 按钮 的选中状态\n      this.customPeriodList = this.customPeriodList.map((item) => {\n        item.selected = false;\n        return item;\n      });\n    },\n    customTimePeriodChangeHandler(_, index) {\n      // 时间段区域 按钮 点击回调\n      const { range, selected } = this.customPeriodList[index];\n      // 按钮选中状态取反\n      this.customPeriodList[index].selected = !selected;\n      // 选中时间格\n      this.selectTime(range, !selected);\n      // 触发事件，向自组件抛出数据\n      this.$emit("custom-time-period-change", this.customPeriodList[index]);\n    },\n    cellDown(item) {\n      // 鼠标落下\n      const ele = document.querySelector(`.${this.flag} td[data-time=\'${item.col}\']`);\n      const parent = document.querySelector(`.${this.flag}`);\n      this.check = Boolean(item.check);\n      this.mode = 1;\n      if (ele) {\n        this.left = ele.offsetLeft;\n        this.right = parent.offsetWidth - (ele.offsetLeft + ele.offsetWidth);\n        this.height = ele.offsetHeight;\n      }\n\n      this.col = item.col;\n    },\n    cellEnter(item) {\n      // 鼠标进入\n      const ele = document.querySelector(`.${this.flag} td[data-time=\'${item.col}\']`);\n      const parent = document.querySelector(`.${this.flag}`);\n      if (item.col - this.col >= 24 * this.colspan) {\n        return;\n      }\n      if (ele && !this.mode) {\n        this.left = ele.offsetLeft;\n        this.right = parent.offsetWidth - ele.offsetLeft;\n        this.top = ele.offsetTop;\n      } else if (item.col == this.col) {\n        this.left = ele.offsetLeft;\n        this.right = parent.offsetWidth - (ele.offsetLeft + ele.offsetWidth);\n      } else if (item.col < this.col) {\n        this.left = ele.offsetLeft;\n        this.top = ele.offsetTop;\n      } else if (item.col > this.col) {\n        this.right = parent.offsetWidth - (ele.offsetLeft + ele.offsetWidth);\n      }\n    },\n    cellUp(item) {\n      // 鼠标抬起 这三个是控制拖动时的动画效果\n      if (item.col - this.col >= 24 * this.colspan) {\n        this.height = 0;\n        this.mode = 0;\n        this.$emit("on-error", "时段选择不得超过24小时");\n        return;\n      }\n      if (item.col <= this.col) {\n        this.selectTime([item.col, this.col], !this.check);\n      } else if (item.col >= this.col) {\n        this.selectTime([this.col, item.col], !this.check);\n      }\n\n      this.height = 0;\n      this.mode = 0;\n    },\n    format(txt) {\n      // 将选中数据转换格式\n      if (!txt) {\n        return [];\n      }\n      let timeRange = txt.split("、");\n      let result = timeRange.map((item) => {\n        let arr = item.split("~");\n        return {\n          startTime: arr[0],\n          endTime: arr[1]\n        };\n      });\n      return result;\n    },\n    valueToSelectValue() {\n      // 回填 将传入的值转换为timeData check属性\n      if (this.value instanceof Array) {\n        this.value.forEach(({ startTime, endTime }) => {\n          const minCol = timeToCol(startTime, true, this.step, this.colspan);\n          const maxCol = timeToCol(endTime, false, this.step, this.colspan);\n          if (maxCol >= this.timeData.length) throw new Error(`Out of range, please check prop: "value"`);\n          for (let i = minCol; i <= maxCol; i++) {\n            this.$set(this.timeData[i], "check", true);\n          }\n        });\n      }\n    },\n    selectTime(col, check) {\n      // 选中时间格\n      const [minCol, maxCol] = col;\n      // 一切变化 源于对 timeData check属性的修改\n      // timeData需要被主动修改 所以并不能是 计算属性\n      this.timeData.forEach((t) => {\n        if (t.col >= minCol && t.col <= maxCol) {\n          this.$set(t, "check", check);\n        }\n      });\n    },\n    clearTime() {\n      this.timeData.forEach((t) => {\n        this.$set(t, "check", false);\n      });\n      this.cancelCustomPerioSelected();\n      // 触发事件\n      this.$emit("on-clear");\n    }\n  }\n};\n<\/script>\n\n<style lang="scss" scoped>\n.c-time {\n  width: 100%;\n  min-width: 640px;\n  position: relative;\n  display: inline-block;\n  overflow-x: auto;\n}\n.c-schedue {\n  background: #99bbec;\n  position: absolute;\n  width: auto;\n  height: 0;\n  opacity: "0.6";\n  pointer-events: none;\n  z-index: 99;\n}\n.c-schedue-notransi {\n  transition: width 0.12s ease, height 0.12s ease, top 0.12s ease, left 0.12s ease;\n}\n.c-time-table {\n  border-collapse: collapse !important;\n  position: relative;\n  width: 100%;\n\n  th {\n    vertical-align: inherit;\n    font-weight: bold;\n  }\n  tr {\n    height: 30px;\n  }\n  tr,\n  td,\n  th {\n    user-select: none;\n    border: 1px solid #dee4f5;\n    text-align: center;\n    min-width: 12px;\n    line-height: 1.8em;\n    transition: background 0.2s ease;\n  }\n  .c-time-head {\n    font-size: 12px;\n    .time-td {\n      width: 70px;\n    }\n  }\n  .c-time-body {\n    font-size: 12px;\n    td {\n      &.time-atom-item {\n        user-select: unset;\n        background-color: #f5f5f5 !important;\n      }\n      &.ui-selected {\n        background-color: #598fe6 !important;\n      }\n    }\n  }\n  .c-time-preview {\n    line-height: 2.4em;\n    padding: 0 10px;\n    font-size: 14px;\n    .c-time-con {\n      line-height: 46px;\n      user-select: none;\n    }\n    .c-time-time {\n      text-align: left;\n      line-height: 2.4em;\n      p {\n        max-width: 625px;\n        line-height: 1.4em;\n        word-break: break-all;\n        margin-bottom: 8px;\n      }\n    }\n  }\n  .c-time-note {\n    div {\n      text-align: left;\n      padding: 0 10px;\n    }\n  }\n}\n.c-min-table {\n  tr,\n  td,\n  th {\n    min-width: 24px;\n  }\n}\n.g-clearfix {\n  &:after,\n  &:before {\n    clear: both;\n    content: " ";\n    display: table;\n  }\n}\n.g-pull-left {\n  float: left;\n}\n.g-pull-right {\n  float: right;\n  cursor: pointer;\n}\n.g-tip-text {\n  color: #999;\n}\n.c-disabled {\n  width: 100%;\n  background: #eee;\n  height: 77px;\n  position: absolute;\n  top: 60px;\n  left: 0;\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n</style>\n<style lang="scss" scoped>\n.button-wrapper {\n  margin-bottom: 10px;\n  /* display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap; */\n}\n.el-button {\n  display: inline-block;\n  line-height: 1;\n  white-space: nowrap;\n  cursor: pointer;\n  background: #fff;\n  border: 1px solid #dcdfe6;\n  color: #606266;\n  text-align: center;\n  box-sizing: border-box;\n  outline: none;\n  margin: 5px;\n  transition: 0.1s;\n  font-weight: 500;\n  padding: 10px;\n  font-size: 14px;\n  border-radius: 4px;\n}\n.el-button:hover {\n  color: #409eff;\n  border-color: #409eff;\n}\n</style>\n',".button-wrapper {\n  margin-bottom: 10px;\n  /* display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap; */\n}\n\n.el-button {\n  display: inline-block;\n  line-height: 1;\n  white-space: nowrap;\n  cursor: pointer;\n  background: #fff;\n  border: 1px solid #dcdfe6;\n  color: #606266;\n  text-align: center;\n  box-sizing: border-box;\n  outline: none;\n  margin: 5px;\n  transition: 0.1s;\n  font-weight: 500;\n  padding: 10px;\n  font-size: 14px;\n  border-radius: 4px;\n}\n\n.el-button:hover {\n  color: #409eff;\n  border-color: #409eff;\n}\n\n/*# sourceMappingURL=index.vue.map */"]},media:void 0}))}),m,"data-v-01744a61",false,undefined,!1,c,void 0,void 0);A.install=e=>{e.component(A.name,A)},console.log("test"),module.exports=A;
